//========================================================================
//=== Debug Functions ====================================================
//========================================================================
function imsg(message)
(
    #temp = sprintf(#, "%i", message);
    #temp += "\n";
    ShowConsoleMsg(#temp);
);
function fmsg(message)
(
    #temp = sprintf(#, "%f", message);
    #temp += "\n";
    ShowConsoleMsg(#temp);
);
function msg(message)
(
    #temp = message;
    #temp += "\n";
    ShowConsoleMsg(#temp);
);

//========================================================================
//=== View ===============================================================
//========================================================================
function viewAxis_new(zoom, scroll, scale)
(
    this.zoom = zoom;
    this.scroll = scroll;
    this.scale = scale;
    this.target = 0.0;
);
function viewAxis_changeScroll(change)
(
    this.scroll = this.scroll - change / (this.zoom * this.scale);
);
function viewAxis_changeZoom(change)
  local(sensitivity, scaledChange, scaledTarget)
(
    sensitivity = 0.005 * this.scale;
    scaledChange = change / this.scale;
    scaledTarget = this.target / this.scale;
    this.zoom = this.zoom * (1.0 + sensitivity * scaledChange);
    this.scroll = this.scroll + sensitivity * scaledChange * scaledTarget / this.zoom;
);

//========================================================================
//=== Helpful Functions ==================================================
//========================================================================
function pointIsInside(pointX, pointY)
(
    pointX >= this.x && pointX <= this.x + this.w
    && pointY >= this.y && pointY <= this.y + this.h;
);

function pitchToPixels(pitch)
(
    mainArea_y + mainView_y.zoom * mainArea_h * ((1.0 - (0.5 + pitch) / pitchHeight) - mainView_y.scroll);
);

//========================================================================
//=== Mouse Functions ====================================================
//========================================================================
function mouseIsInside()   ( this.pointIsInside(mouse_x, mouse_y); );

function mouseLeftState()  ( mouse_cap & 1 == 1; );
function mouseLeftDown()   ( mouse_cap & 1 == 1 && previous_mouse_cap & 1 == 0; );
function mouseLeftUp()     ( mouse_cap & 1 == 0 && previous_mouse_cap & 1 == 1; );
function mouseMiddleState()( mouse_cap & 64 == 64; );
function mouseMiddleDown() ( mouse_cap & 64 == 64 && previous_mouse_cap & 64 == 0; );
function mouseMiddleUp()   ( mouse_cap & 64 == 0 && previous_mouse_cap & 64 == 64; );
function mouseRightState() ( mouse_cap & 2 == 2; );
function mouseRightDown()  ( mouse_cap & 2 == 2 && previous_mouse_cap & 2 == 0; );
function mouseRightUp()    ( mouse_cap & 2 == 0 && previous_mouse_cap & 2 == 2; );
function shiftState()      ( mouse_cap & 8 == 8; );
function shiftDown()       ( mouse_cap & 8 == 8 && previous_mouse_cap & 8 == 0; );
function shiftUp()         ( mouse_cap & 8 == 0 && previous_mouse_cap & 8 == 8; );
function controlState()    ( mouse_cap & 4 == 4; );
function controlDown()     ( mouse_cap & 4 == 4 && previous_mouse_cap & 4 == 0; );
function controlUp()       ( mouse_cap & 4 == 0 && previous_mouse_cap & 4 == 4; );
function altState()        ( mouse_cap & 16 == 16; );
function altDown()         ( mouse_cap & 16 == 16 && previous_mouse_cap & 16 == 0; );
function altUp()           ( mouse_cap & 16 == 0 && previous_mouse_cap & 16 == 16; );
function windowsState()    ( mouse_cap & 32 == 32; );
function windowsDown()     ( mouse_cap & 32 == 32 && previous_mouse_cap & 32 == 0; );
function windowsUp()       ( mouse_cap & 32 == 0 && previous_mouse_cap & 32 == 32; );
function wheelMoved()      ( GFX_wheel > 0 || GFX_wheel < 0);

//========================================================================
//=== Define Graphical Elements ==========================================
//========================================================================
function element_new(x,y,w,h)
(
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
);

//========================================================================
//=== Key Background =====================================================
//========================================================================
//function getWhiteKeyNumbers(buffer)
//  local(i, whiteKeyMultiples)
//(
//    whiteKeyMultiples[7] = { 1, 3, 4, 6, 8, 9, 11 };
//    i = 0;
//    loop(11,
//        loop(7,
//            buffer[i] = i * 12 + whiteKeyMultiples[i];
//        );
//        i += 1;
//    );
//);
function drawKeyBackgrounds()
  local(i, previousKeyEnd, keyEnd, keyHeight, keyCenterLine)
(
    previousKeyEnd = pitchToPixels(pitchHeight + 0.5);

    i = 0;
    loop(pitchHeight,
        keyEnd = pitchToPixels(pitchHeight - i + 1.5);
        keyHeight = keyEnd - previousKeyEnd;

        gfx_set(0.25, 0.25, 0.25, 1.0);
        //for _, value in ipairs(self.whiteKeyNumbers) do
        //loop(
        //    if i == value then
        //        gfx_set(0.34, 0.34, 0.34, 1.0);
        //    end
        //end
        //gfx_rect(0, keyEnd, gfx_w, keyHeight + 1, 1);

        //gfx_set(0.25, 0.25, 0.25, 1.0);
        gfx_line(0, keyEnd, gfx_w - 1, keyEnd, 0);

        keyHeight > 16 ? (
            keyCenterLine = pitchToPixels(self.pitchHeight - i + 1);
            gfx_set(1.0, 1.0, 1.0, 0.12);
            gfx_line(0, keyCenterLine, gfx_w - 1, keyCenterLine, 0);
        );

        previousKeyEnd = keyEnd;
        i += 1;
    );
);

//========================================================================
//=== Buttons ============================================================
//========================================================================
function button_new(x,y,w,h, r,g,b,a, label)
(
    this.element_new(x, y, w, h);
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a;
    this.label = label;
);
function button_draw()
  local(x,y,w,h, r,g,b,a, label,label_w,label_h, value,value_w,value_h)
(
    x =     this.x;
    y =     this.y;
    w =     this.w;
    h =     this.h;
    r =     this.r;
    g =     this.g;
    b =     this.b;
    a =     this.a;
    label = this.label;

    gfx_set(r, g, b, a);
    gfx_rect(x, y, w, h, 1);
    gfx_set(1.0, 1.0, 1.0, 0.3);
    gfx_rect(x, y, w, h, 0);

    this.mouseIsInside() ? (
        this.mouseLeftState() ? (
            gfx_set(1.0, 1.0, 1.0, 0.7);
        );
        gfx_rect(x, y, w, h, 1);
    );

    gfx_set(1.0, 1.0, 1.0, 0.9);
    gfx_measurestr(label, label_w, label_h);
    gfx_x = x + (w - label_w) / 2;
    gfx_y = y + (h - label_h) / 2;
    gfx_drawstr(label);
);

//========================================================================
//=== Create Graphical Elements ==========================================
//========================================================================
testButton.button_new(20,20,140,30, 0.0,0.3,0.4,1.0, "test");

//========================================================================
//=== Main Processing ====================================================
//========================================================================

function GFX_init(title, x, y, w, h, dock)
(
    gfx_init(title, w, h, dock, x, y);
    gfx_clear = 32 + 32 * 256 + 32 * 65536;
    gfx_setfont(1, "Arial", 15);

    previous_mouse_cap = 0;
    previous_mouse_x = 0;
    previous_mouse_y = 0;
    mouse_x_delta = 0;
    mouse_y_delta = 0;

    mainArea_y = 40;
    pitchHeight = 128;
    mainArea_h = gfx_h - mainArea_y;

    mainView_x.viewAxis_new(1.0, 0.0, gfx_x);
    mainView_y.viewAxis_new(1.0, 0.0, mainArea_h);
);
function GFX_run()
(
    // Initialize GFX parameters.
    GFX_char = gfx_getchar();
    GFX_wheel = mouse_wheel / 120;
    GFX_hWheel = mouse_hwheel / 120;
    mouse_wheel = 0;
    mouse_hwheel = 0;
    mouse_x_delta = mouse_x - previous_mouse_x;
    mouse_y_delta = mouse_y - previous_mouse_y;

    mouseMiddleDown() ? (
        mainView_x.target = mouse_x;
        mainView_y.target = mouse_y;
    );

    mouseMiddleState() ? (
        shiftState() ? (
            mainView_x.viewAxis_changeZoom(mouse_x_delta);
            mainView_y.viewAxis_changeZoom(mouse_y_delta);
        ):(
            mainView_x.viewAxis_changeScroll(mouse_x_delta);
            mainView_y.viewAxis_changeScroll(mouse_y_delta);
        );
    );

    //testButton.button_draw();
    drawKeyBackgrounds();

    // Allow the Space Bar to play the current project.
    GFX_char == 32 ? Main_OnCommand(40044, 0);

    // Make Escape and clicking the X button close the window.
    GFX_char != 27 && GFX_char != -1 ? defer("GFX_run();");
    gfx_update();

    previous_mouse_cap = mouse_cap;
    previous_mouse_x = mouse_x;
    previous_mouse_y = mouse_y;
);

GFX_init("Alkamist Pitch Correction", 200, 200, 1000, 700, 0);
GFX_run();