//========================================================================
//=== Debug Functions ====================================================
//========================================================================
function imsg(message)
(
    #temp = sprintf(#, "%i", message);
    #temp += "\n";
    ShowConsoleMsg(#temp);
);
function fmsg(message)
(
    #temp = sprintf(#, "%f", message);
    #temp += "\n";
    ShowConsoleMsg(#temp);
);
function msg(message)
(
    #temp = message;
    #temp += "\n";
    ShowConsoleMsg(#temp);
);

//========================================================================
//=== View ===============================================================
//========================================================================
function viewAxis_new(zoom, scroll, scale)
(
    this.zoom = zoom;
    this.scroll = scroll;
    this.scale = scale;
    this.target = 0.0;
);
function viewAxis_changeScroll(change)
(
    this.scroll = this.scroll - change / (this.zoom * this.scale);
);
function viewAxis_changeZoom(change)
  local(sensitivity, scaledChange, scaledTarget)
(
    sensitivity = 0.005 * this.scale;
    scaledChange = change / this.scale;
    scaledTarget = this.target / this.scale;
    this.zoom = this.zoom * (1.0 + sensitivity * scaledChange);
    this.scroll = this.scroll + sensitivity * scaledChange * scaledTarget / this.zoom;
);

//========================================================================
//=== Helpful Functions ==================================================
//========================================================================
function windowWasResized()( gfx_w != gfx_previous_w || gfx_h != gfx_previous_h; );

function pointIsInside(pointX, pointY)
(
    pointX >= this.x && pointX <= this.x + this.w
    && pointY >= this.y && pointY <= this.y + this.h;
);

function pixelsToTime(pixels)
(
    pitchEditor_timeWidth * (pitchEditor_view_x.scroll + (pixels + pitchEditor_x) / (pitchEditor_w * pitchEditor_view_x.zoom));
);
function timeToPixels(time)
(
    pitchEditor_x + pitchEditor_view_x.zoom * pitchEditor_w * (time / pitchEditor_timeWidth - pitchEditor_view_x.scroll);
);
function pixelsToPitch(pixels)
(
    pitchEditor_pitchHeight * (1.0 - (pitchEditor_view_y.scroll + (pixels + pitchEditor_y) / (pitchEditor_h * pitchEditor_view_y.zoom))) - 0.5;
);
function pitchToPixels(pitch)
(
    pitchEditor_y + pitchEditor_view_y.zoom * pitchEditor_h * ((1.0 - (0.5 + pitch) / pitchEditor_pitchHeight) - pitchEditor_view_y.scroll);
);

//========================================================================
//=== Mouse Functions ====================================================
//========================================================================
function mouseIsInside()   ( this.pointIsInside(mouse_x, mouse_y); );

function mouseLeftState()  ( mouse_cap & 1 == 1; );
function mouseLeftDown()   ( mouse_cap & 1 == 1 && previous_mouse_cap & 1 == 0; );
function mouseLeftUp()     ( mouse_cap & 1 == 0 && previous_mouse_cap & 1 == 1; );
function mouseMiddleState()( mouse_cap & 64 == 64; );
function mouseMiddleDown() ( mouse_cap & 64 == 64 && previous_mouse_cap & 64 == 0; );
function mouseMiddleUp()   ( mouse_cap & 64 == 0 && previous_mouse_cap & 64 == 64; );
function mouseRightState() ( mouse_cap & 2 == 2; );
function mouseRightDown()  ( mouse_cap & 2 == 2 && previous_mouse_cap & 2 == 0; );
function mouseRightUp()    ( mouse_cap & 2 == 0 && previous_mouse_cap & 2 == 2; );
function shiftState()      ( mouse_cap & 8 == 8; );
function shiftDown()       ( mouse_cap & 8 == 8 && previous_mouse_cap & 8 == 0; );
function shiftUp()         ( mouse_cap & 8 == 0 && previous_mouse_cap & 8 == 8; );
function controlState()    ( mouse_cap & 4 == 4; );
function controlDown()     ( mouse_cap & 4 == 4 && previous_mouse_cap & 4 == 0; );
function controlUp()       ( mouse_cap & 4 == 0 && previous_mouse_cap & 4 == 4; );
function altState()        ( mouse_cap & 16 == 16; );
function altDown()         ( mouse_cap & 16 == 16 && previous_mouse_cap & 16 == 0; );
function altUp()           ( mouse_cap & 16 == 0 && previous_mouse_cap & 16 == 16; );
function windowsState()    ( mouse_cap & 32 == 32; );
function windowsDown()     ( mouse_cap & 32 == 32 && previous_mouse_cap & 32 == 0; );
function windowsUp()       ( mouse_cap & 32 == 0 && previous_mouse_cap & 32 == 32; );
function wheelMoved()      ( GFX_wheel > 0 || GFX_wheel < 0);

//========================================================================
//=== Graphical Elements =================================================
//========================================================================
function element_new(x,y,w,h)
(
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
);

//========================================================================
//=== Key Background =====================================================
//========================================================================
function getWhiteKeyNumbers(whiteKeys)
  local(octave)
(
    0[0] = 0; 0[1] = 2; 0[2] = 3; 0[3] = 5; 0[4] = 7; 0[5] = 8; 0[6] = 10;
    octave = 0;
    numberOfWhiteKeys = 0;
    loop(11,
        loop(7,
            whiteKeys[numberOfWhiteKeys] = octave * 12 + 0[numberOfWhiteKeys - octave * 7];
            numberOfWhiteKeys += 1;
        );
        octave += 1;
    );
);
function drawKeyBackgrounds()
  local(i, j, previousKeyEnd, keyEnd, keyHeight, keyCenterLine)
(
    previousKeyEnd = pitchToPixels(pitchEditor_pitchHeight + 0.5);

    i = 0;
    loop(pitchEditor_pitchHeight,
        keyEnd = pitchToPixels(pitchEditor_pitchHeight - i - 0.5);
        keyHeight = keyEnd - previousKeyEnd;

        gfx_set(0.25, 0.25, 0.25, 1.0);
        j = 0;
        loop(numberOfWhiteKeys,
            i == whiteKeyNumbers[j] ? (
                gfx_set(0.34, 0.34, 0.34, 1.0);
            );
            j += 1;
        );
        gfx_rect(0, keyEnd, pitchEditor_w, keyHeight + 1, 1);

        gfx_set(0.25, 0.25, 0.25, 1.0);
        gfx_line(0, keyEnd, pitchEditor_w - 1, keyEnd, 0);

        keyHeight > 16 ? (
            keyCenterLine = pitchToPixels(pitchEditor_pitchHeight - i - 1);
            gfx_set(1.0, 1.0, 1.0, 0.12);
            gfx_line(0, keyCenterLine, gfx_w - 1, keyCenterLine, 0);
        );

        previousKeyEnd = keyEnd;
        i += 1;
    );
);

//========================================================================
//=== Item Backgrounds ===================================================
//========================================================================
function drawItemBackgrounds()
  local(i, item, leftBoundTime, rightBoundTime, leftBoundPixels, rightBoundPixels, boxWidth, boxHeight)
(
    i = 0;
    loop(pitchEditor_numberOfItems,
        item = pitchEditor_items[i];
        leftBoundTime = GetMediaItemInfo_Value(item, "D_POSITION") - pitchEditor_leftEdge;
        rightBoundTime = leftBoundTime + GetMediaItemInfo_Value(item, "D_LENGTH");
        leftBoundPixels = timeToPixels(leftBoundTime);
        rightBoundPixels = timeToPixels(rightBoundTime);
        boxWidth = rightBoundPixels - leftBoundPixels;
        boxHeight = gfx_h - 2;

        gfx_set(1.0, 1.0, 1.0, 0.02);
        gfx_rect(leftBoundPixels + 1, 2, boxWidth - 2, boxHeight - 2, 1);

        gfx_set(1.0, 1.0, 1.0, 0.17);
        gfx_rect(leftBoundPixels, 1, boxWidth, boxHeight, 0);

        i += 1;
    );
);

//========================================================================
//=== Buttons ============================================================
//========================================================================
function button_new(x,y,w,h, r,g,b,a, label)
(
    this.element_new(x, y, w, h);
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a;
    this.label = label;
);
function button_draw()
  local(x,y,w,h, r,g,b,a, label,label_w,label_h, value,value_w,value_h)
(
    x =     this.x;
    y =     this.y;
    w =     this.w;
    h =     this.h;
    r =     this.r;
    g =     this.g;
    b =     this.b;
    a =     this.a;
    label = this.label;

    gfx_set(r, g, b, a);
    gfx_rect(x, y, w, h, 1);
    gfx_set(1.0, 1.0, 1.0, 0.3);
    gfx_rect(x, y, w, h, 0);

    this.mouseIsInside() ? (
        this.mouseLeftState() ? (
            gfx_set(1.0, 1.0, 1.0, 0.7);
        );
        gfx_rect(x, y, w, h, 1);
    );

    gfx_set(1.0, 1.0, 1.0, 0.9);
    gfx_measurestr(label, label_w, label_h);
    gfx_x = x + (w - label_w) / 2;
    gfx_y = y + (h - label_h) / 2;
    gfx_drawstr(label);
);

//========================================================================
//=== Create Graphical Elements ==========================================
//========================================================================
testButton.button_new(20,20,140,30, 0.0,0.3,0.4,1.0, "test");

//========================================================================
//=== Main Processing ====================================================
//========================================================================
function updateSelectedItems()
  local(i, j, leftMostItem, rightMostItem, topMostSelectedItemTrackNumber)
(
    topMostSelectedItemTrackNumber = CountTracks(0);
    i = 0;
    loop(CountSelectedMediaItems(0),
        topMostSelectedItemTrackNumber = min(GetMediaTrackInfo_Value(GetMediaItemTrack(GetSelectedMediaItem(0, i)), "IP_TRACKNUMBER"), topMostSelectedItemTrackNumber);
        i += 1;
    );
    pitchEditor_track = GetTrack(0, topMostSelectedItemTrackNumber - 1);

    i = 0;
    j = 0;
    loop(CountSelectedMediaItems(0),
        leftMostItem = GetSelectedMediaItem(0, i);
        pitchEditor_track == GetMediaItemTrack(leftMostItem) ? (
            pitchEditor_items[j] = leftMostItem;
            j += 1;
        );
        i += 1;
    );
    pitchEditor_numberOfItems = j;

    pitchEditor_numberOfItems > 0 ? (
        leftMostItem = pitchEditor_items[0];
        rightMostItem = pitchEditor_items[pitchEditor_numberOfItems - 1];
        pitchEditor_leftEdge = GetMediaItemInfo_Value(leftMostItem, "D_POSITION");
        pitchEditor_rightEdge = GetMediaItemInfo_Value(rightMostItem, "D_POSITION") + GetMediaItemInfo_Value(rightMostItem, "D_LENGTH");
        pitchEditor_timeWidth = pitchEditor_rightEdge - pitchEditor_leftEdge;
    ):(
        pitchEditor_leftEdge = 0;
        pitchEditor_rightEdge = 0;
        pitchEditor_timeWidth = 0;
    );
);

function GFX_init(title, x, y, w, h, dock)
(
    gfx_init(title, w, h, dock, x, y);
    gfx_clear = 32 + 32 * 256 + 32 * 65536;
    gfx_setfont(1, "Arial", 15);

    previous_mouse_cap = 0;
    previous_mouse_x = 0;
    previous_mouse_y = 0;
    mouse_x_delta = 0;
    mouse_y_delta = 0;

    gfx_previous_w = 0;
    gfx_previous_h = 0;

    mouseTime = 0;
    mousePitch = 0;

    pitchEditor_y = 0;
    pitchEditor_h = gfx_h - pitchEditor_y;
    pitchEditor_x = 0;
    pitchEditor_w = gfx_w - pitchEditor_x;
    pitchEditor_track = 0;
    pitchEditor_numberOfItems = 0;

    relativeMouseX = 0;
    relativeMouseY = 0;

    numberOfSelectedItems = 0;
    previousNumberOfSelectedItems = 0;

    pitchEditor_leftEdge = 0;
    pitchEditor_rightEdge = 0;
    pitchEditor_timeWidth = 0;
    pitchEditor_pitchHeight = 128;

    numberOfWhiteKeys = 0;

    pitchEditor_view_x.viewAxis_new(1.0, 0.0, pitchEditor_w);
    pitchEditor_view_y.viewAxis_new(1.0, 0.0, pitchEditor_h);

    // ARRAYS:
    pitchEditor_items = 10000;
    whiteKeyNumbers = 1000;
    getWhiteKeyNumbers(whiteKeyNumbers);
);
function GFX_run()
(
    // Initialize GFX parameters.
    GFX_char = gfx_getchar();
    GFX_wheel = mouse_wheel / 120;
    GFX_hWheel = mouse_hwheel / 120;
    mouse_wheel = 0;
    mouse_hwheel = 0;
    mouse_x_delta = mouse_x - previous_mouse_x;
    mouse_y_delta = mouse_y - previous_mouse_y;

    relativeMouseX = mouse_x + pitchEditor_x;
    relativeMouseY = mouse_y + pitchEditor_y;
    mouseTime =  pixelsToTime(relativeMouseX);
    mousePitch = pixelsToPitch(relativeMouseY);

    numberOfSelectedItems = CountSelectedMediaItems(0);
    numberOfSelectedItems != previousNumberOfSelectedItems ? (
        updateSelectedItems();
    );

    windowWasResized() ? (
        pitchEditor_w = gfx_w - pitchEditor_x;
        pitchEditor_h = gfx_h - pitchEditor_y;
        pitchEditor_view_x.scale = pitchEditor_w;
        pitchEditor_view_y.scale = pitchEditor_h;
    );

    mouseMiddleDown() ? (
        pitchEditor_view_x.target = mouse_x;
        pitchEditor_view_y.target = mouse_y;
    );

    mouseMiddleState() ? (
        shiftState() ? (
            pitchEditor_view_x.viewAxis_changeZoom(mouse_x_delta);
            pitchEditor_view_y.viewAxis_changeZoom(mouse_y_delta);
        ):(
            pitchEditor_view_x.viewAxis_changeScroll(mouse_x_delta);
            pitchEditor_view_y.viewAxis_changeScroll(mouse_y_delta);
        );
    );

    //testButton.button_draw();
    drawKeyBackgrounds();
    drawItemBackgrounds();

    // Allow the Space Bar to play the current project.
    GFX_char == 32 ? Main_OnCommand(40044, 0);

    // Make Escape and clicking the X button close the window.
    GFX_char != 27 && GFX_char != -1 ? defer("GFX_run();");
    gfx_update();

    previous_mouse_cap = mouse_cap;
    previous_mouse_x = mouse_x;
    previous_mouse_y = mouse_y;
    gfx_previous_w = gfx_w;
    gfx_previous_h = gfx_h;
    previousNumberOfSelectedItems = numberOfSelectedItems;
);

GFX_init("Alkamist Pitch Correction", 200, 200, 1000, 700, 0);
GFX_run();