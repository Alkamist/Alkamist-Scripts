// based on http://recherche.ircam.fr/equipes/pcm/cheveign/pss/2002_JASA_YIN.pdf
// used some modified code snippets from JSFX Pitch Follower by aparker127 http://stash.reaper.fm/v/30507/pitch-follower

//function msg(s)(ShowConsoleMsg(s); ShowConsoleMsg("\n"));

function d(tau istart iwinend) //Difference Function (YIN eq. 6)
  local(sum i_d)
(
    sum = 0;
    i_d = 0;
    loop(iwinend + 1 - istart - tau,
        sum += sqr(istart[i_d] - istart[i_d + tau]);
        i_d += 1;
    );
    sum;
);
function avg(imin imax) //max non-inclusive
  local(num sum)
(
    num = 0;
    sum = 0;
    loop(imax - imin,
        sum += imin[num];
        num += 1;
    );
    sum / (imax - imin);
);
function parab(iclosest)
  local(x1 y1 x2 y2 x3 y3 denom a b c)
(
    x1 = iclosest - 1;
    y1 = x1[0];
    x2 = iclosest;
    y2 = iclosest[0];
    x3 = iclosest + 1;
    y3 = x3[0];

    denom = (x1 - x2) * (x1 - x3) * (x2 - x3);
    a = (x3 * (y2 - y1) + x2 * (y1 - y3) + x1 * (y3 - y2)) / denom;
    b = (x3 * x3 * (y1 - y2) + x2 * x2 * (y3 - y1) + x1 * x1 * (y2 - y3)) / denom;
    //c = (x2 * x3 * (x2 - x3) * y1 + x3 * x1 * (x3 - x1) * y2 + x1 * x2 * (x1 - x2) * y3) / denom;
    -b / (2 * a);
);
function findMin(istart iend thresh srate minLook)
  local(i rmin return_ind return_ind)
(
    i = 1;
    rmin = thresh; // "running min"
    return_ind = -srate;
    loop(iend - istart - 10,
        istart[i] < rmin ? (
            rmin = istart[i];
            return_ind = istart + i;
        );
        istart[i] > thresh ? (
            rmin < thresh ? (
                rmin = -10;
            );
        );
        i += 1;
    );
    minLook + parab(return_ind) - istart;
);
function lim(val, min0, max0)(
    min0 ==0 & max0 ? (min0 =0; max0 = 1);
    val = max(min0, min(val, max0)) ;
    val
);
function round(num)
  local(mult ret)
(
    num >= 0 ?
    (
        mult = 1;
    ) : (
        mult = -1;
    );
    abs(num) - floor(abs(num)) >= 0.5 ?
    (
        ret = mult * ceil(abs(num));
    ) : (
        ret = mult * floor(abs(num));
    );
    ret;
);

function cmnd(tau istart iwinend) //Cumulative Mean Normalized Difference (YIN eq. 8)
  local(i return)
(
    dbufstart = 127127;

    i = 0;
    loop(tau + 1,
        dbufstart[i] = d(i, istart, iwinend);
        i += 1;
    );
    tau == 0 ? (
        return = 1;
    ):(
        return = dbufstart[tau] / avg(dbufstart, dbufstart + tau + 1);
    );
    return;
);

function getFrequency(spos srate winSamples maxlen windowStep minF maxF YINthresh)
  local(maxLook minLook dpos cmndpos i freq)
(
    maxLook = floor(min(srate / minF,winSamples)); //from MinFreq
    minLook = floor(srate / maxF); //from MaxFreq
    dpos = winSamples + 100; //start of cmnd buffer, "difference position"
    cmndpos = dpos + maxLook + 100;
    cmndpos[0] = 1;

    i = 0;
    loop(maxLook - minLook + 1,
        dpos[i] = d(minLook + i, spos, spos + winSamples);
        i += 1;
    );

    i = 1;
    loop(maxLook - minLook + 1,
        cmndpos[i] = dpos[i] / (avg(dpos, dpos + i + 1));
        i += 1;
    );

    avg(dpos, dpos + maxLook - minLook) > 0.00001 ?
    (
        freq = srate / findMin(cmndpos, cmndpos + 1 + maxLook - minLook, YINthresh, srate, minLook);
    ) : (
        freq = 0;
    );

    freq < 0 ? freq = 0;
    freq
);

function getPitchDataByTakeGUID(pitchData takeGUID windowStep minF maxF lowRMSlimit lowRMSlimitdB overlap YINthresh startTime timeWindow)
  local(item take startOffset sourceSampleRate itemSource accessor bufferSize seekPosition length rms spos)
(
    #pitchData = "";
    take = GetMediaItemTakeByGUID(0, #takeGUID);

    TakeIsMIDI(take) == 0 ?
    (
        item =              GetMediaItemTakeInfo_Value(take, "P_ITEM");
        //length =            GetMediaItemInfo_Value(item, "D_LENGTH");
        length =            timeWindow;
        startOffset =       GetMediaItemTakeInfo_Value(take, "D_STARTOFFS");
        itemSource =        GetMediaItemTake_Source(take);
        sourceSampleRate =  GetMediaSourceSampleRate(itemSource);

        bufferSize = floor(sourceSampleRate * windowStep);

        //seekPosition = 0;
        seekPosition = startTime;
        spos = 0;
        memset(0, 0, bufferSize); // clear samplebuffer

        accessor = CreateTakeAudioAccessor(take);

        while (
            GetAudioAccessorSamples(accessor, sourceSampleRate, 1, seekPosition, bufferSize, spos);

            // Get RMS.
            rms = 0; i = 0; loop(bufferSize, rms = rms + abs(spos[i]); i += 1;); rms = rms / bufferSize;

            // Seek transient.
            rmsdB = 20 * log10(rms * 2);
            last_rmsdB = 20 * log10(last_rms * 2);

            last_rms = rms;

            // Perform pitch detection.
            rms > lowRMSlimit ? (
                frequency = getFrequency(spos, sourceSampleRate, bufferSize, maxlen, windowStep, minF, maxF, YINthresh);
                note = 69 + 12 * log(frequency / 440) / log(2);
                note = min(max(note, 0), 127);

                frequency > 0 && strlen(#pitchData) < 64000 ?
                (
                    strcat(#pitchData, sprintf(#, "%f", seekPosition + startOffset));
                    strcat(#pitchData, " ");

                    strcat(#pitchData, sprintf(#, "%f", note));
                    strcat(#pitchData, " ");

                    strcat(#pitchData, sprintf(#, "%f", rms));
                    strcat(#pitchData, " ");

                    strcat(#pitchData, "\n");
                );
            );

            seekPosition += windowStep / overlap;
            seekPosition < startTime + length - windowStep;
        );

        DestroyAudioAccessor(accessor);
    );
);

function calculatePitchDataAndWriteToExtState()
  local(windowStep minFreq maxFreq YINthresh overlap lowRMSLimitdB lowRMSLimitdB startTime timeWindow)
(
    GetExtState(#takeGUID,      "Alkamist_PitchCorrection", "TAKEGUID");
    GetExtState(#windowStep,    "Alkamist_PitchCorrection", "WINDOWSTEP");
    GetExtState(#minFreq,       "Alkamist_PitchCorrection", "MINFREQ");
    GetExtState(#maxFreq,       "Alkamist_PitchCorrection", "MAXFREQ");
    GetExtState(#YINthresh,     "Alkamist_PitchCorrection", "YINTHRESH");
    GetExtState(#overlap,       "Alkamist_PitchCorrection", "OVERLAP");
    GetExtState(#lowRMSLimitdB, "Alkamist_PitchCorrection", "LOWRMSLIMDB");
    GetExtState(#startTime,     "Alkamist_PitchCorrection", "STARTTIME");
    GetExtState(#timeWindow,    "Alkamist_PitchCorrection", "TIMEWINDOW");

    // Convert the parameters from strings to numbers.
    match("%f", #windowStep,    windowStep);
    match("%f", #minFreq,       minFreq);
    match("%f", #maxFreq,       maxFreq);
    match("%f", #YINthresh,     YINthresh);
    match("%f", #overlap,       overlap);
    match("%f", #lowRMSLimitdB, lowRMSLimitdB);
    match("%f", #startTime,     startTime);
    match("%f", #timeWindow,    timeWindow);

    lowRMSlimit = exp(lowRMSLimitdB * 0.11512925464970228420089957273422);

    getPitchDataByTakeGUID(#pitchData,
                           #takeGUID,
                           windowStep,
                           minFreq,
                           maxFreq,
                           lowRMSlimit,
                           lowRMSLimitdB,
                           overlap,
                           YINthresh,
                           startTime,
                           timeWindow);

    SetExtState("Alkamist_PitchCorrection", "PITCHDATA", #pitchData, 0)
);

calculatePitchDataAndWriteToExtState();